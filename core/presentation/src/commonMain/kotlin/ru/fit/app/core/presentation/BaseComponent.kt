package ru.fit.app.core.presentationimport com.arkivanov.decompose.ComponentContextimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Deferredimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.Jobimport kotlinx.coroutines.SupervisorJobimport kotlinx.coroutines.asyncimport kotlinx.coroutines.launchopen class BaseComponent(	componentContext: ComponentContext) : ComponentContext by componentContext {	private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)	val scope: CoroutineScope		get() = coroutineScope	protected fun launch(block: suspend CoroutineScope.() -> Unit): Job =		scope.launch(block = block)	protected fun <T> async(block: suspend CoroutineScope.() -> T): Deferred<T> =		scope.async(block = block)}