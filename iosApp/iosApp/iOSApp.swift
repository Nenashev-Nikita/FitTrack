import SwiftUI@mainstruct iOSApp: App {    @UIApplicationDelegateAdaptor(AppDelegate.self)    var appDelegate: AppDelegate    var body: some Scene {        WindowGroup {        struct ContentView: View {            var body: some View {                VStack {                    Image(systemName: "globe")                        .imageScale(.large)                        .foregroundStyle(.tint)                    Text("Hello, world!")                }                .padding()            }        }//            RootView(root: appDelegate.root, backDispatcher: appDelegate.backDispatcher)//                .ignoresSafeArea(.all)        }    }}class AppDelegate: NSObject, UIApplicationDelegate {    private var stateKeeper = StateKeeperDispatcherKt.StateKeeperDispatcher(savedState: nil)    var backDispatcher: BackDispatcher = BackDispatcherKt.BackDispatcher()    lazy var root: RootComponent = DefaultRootComponent(        componentContext: DefaultComponentContext(            lifecycle: ApplicationLifecycle(),            stateKeeper: stateKeeper,            instanceKeeper: nil,            backHandler: backDispatcher        ),        featureInstaller: DefaultFeatureInstaller.shared,        deepLinkUrl: nil    )    func application(_ application: UIApplication, shouldSaveSecureApplicationState coder: NSCoder) -> Bool {        StateKeeperUtilsKt.save(coder: coder, state: stateKeeper.save())        return true    }    func application(_ application: UIApplication, shouldRestoreSecureApplicationState coder: NSCoder) -> Bool {//        stateKeeper = StateKeeperDispatcherKt.StateKeeperDispatcher(savedState: StateKeeperUtilsKt.restore(coder: coder))        return true    }}