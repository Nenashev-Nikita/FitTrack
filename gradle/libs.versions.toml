[versions]
agp = "8.5.2"
#android
android-compileSdk = "34"
android-minSdk = "24"
android-targetSdk = "34"
androidx-activityCompose = "1.9.3"
androidx-lifecycle = "2.8.4"
composeM3 = "1.15.0"
foundationAndroid = "1.7.8"

#kotlin
kotlin = "2.1.10"
kotlinxDatetime = "0.6.0"
kotlinxSerializationCore = "1.8.0"

#compose
compose-multiplatform = "1.7.3"

#parcelable
mockk = "1.13.9"
parcelable = "1.3.0"

#di
kodeinDi = "7.22.0"

#network
ktor = "3.1.1"

#decompose
decompose = "3.3.0"

#material-compose
material3 = "1.7.3"
compose = "1.7.3"

#coil
coilCompose = "2.7.0"

# ksp
ksp = "1.9.20-1.0.14"
koin-ksp = "1.3.0"

# Testing
kotlin-test = "1.10.1"
koin = "4.0.0"
turbine = "1.1.0"
lifecycle = "2.5.0"

[libraries]
# Kotlin
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinxSerializationCore" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationCore" }

# Android libraries
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-foundation-android = { group = "androidx.compose.foundation", name = "foundation-android", version.ref = "foundationAndroid" }

# Network libraries
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }

# Decompose libraries
decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-extensions-compose = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }

# DI libraries
kodein-di = { module = "org.kodein.di:kodein-di", version.ref = "kodeinDi" }
kodein-di-framework-android-x = { module = "org.kodein.di:kodein-di-framework-android-x", version.ref = "kodeinDi" }

# Mockito and Mocking
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk-agent = { module = "io.mockk:mockk-agent", version.ref = "mockk" }

# Testing libraries
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-coroutine-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin-test" }
lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "lifecycle" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }

# Parcelable
parcelable = { module = "com.arkivanov.essenty:parcelable", version.ref = "parcelable" }

# Material-Compose
compose-material3 = { module = "org.jetbrains.compose.material3:material3", version.ref = "material3" }
ui = { module = "org.jetbrains.compose.ui:ui", version.ref = "compose" }
runtime = { module = "org.jetbrains.compose.runtime:runtime", version.ref = "compose" }
material-icons-extended = { module = "org.jetbrains.compose.material:material-icons-extended", version.ref = "material3" }
components-resources = { module = "org.jetbrains.compose.components:components-resources", version.ref = "compose" }
foundation = { module = "org.jetbrains.compose.foundation:foundation", version.ref = "compose" }

#coil
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coilCompose" }
coil-network-ktor = { module = "io.coil-kt:coil-network-ktor", version.ref = "coilCompose" }

# KSP

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }

[bundles]
ktor = [
    "ktor-client-core",
    "ktor-client-content-negotiation",
    "ktor-client-auth",
    "ktor-client-logging",
    "ktor-serialization-kotlinx-json",
]