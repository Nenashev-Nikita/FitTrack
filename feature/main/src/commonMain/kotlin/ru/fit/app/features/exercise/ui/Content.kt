package ru.fit.app.features.exercise.uiimport androidx.compose.foundation.BorderStrokeimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.foundation.pager.HorizontalPagerimport androidx.compose.foundation.pager.rememberPagerStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.FitnessCenterimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlinx.datetime.Clockimport kotlinx.datetime.DateTimeUnitimport kotlinx.datetime.DayOfWeekimport kotlinx.datetime.LocalDateimport kotlinx.datetime.TimeZoneimport kotlinx.datetime.isoDayNumberimport kotlinx.datetime.minusimport kotlinx.datetime.plusimport kotlinx.datetime.toLocalDateTimeimport ru.fit.app.FitThemeimport ru.fit.app.shared.training.domain.entity.Training@Composablefun Content(	modifier: Modifier = Modifier,	trainings: List<Training>,	onWorkoutSelected: (Int) -> Unit,	onAddWorkout: () -> Unit,	onRefresh: () -> Unit,) {	val today = getCurrentDate()	val selectedDate = remember { mutableStateOf(today) }	val pagerState = rememberPagerState(initialPage = Int.MAX_VALUE / 2) { Int.MAX_VALUE }	val lazyListState = rememberLazyListState()	LaunchedEffect(pagerState.currentPage) {		val weekOffset = pagerState.currentPage - (Int.MAX_VALUE / 2)		selectedDate.value = today.plus(weekOffset.toLong() * 7, DateTimeUnit.DAY)	}	Column {		HorizontalPager(			state = pagerState,			modifier = Modifier.fillMaxWidth()		) { page ->			val weekStart = today				.plus((page - Int.MAX_VALUE / 2).toLong() * 7, DateTimeUnit.DAY)				.getWeekStart()			WeekSelector(				weekStart = weekStart,				selectedDate = selectedDate.value,				today = today,				onDateSelected = { selectedDate.value = it }			)		}		val filteredTrainings = trainings.filter { training ->			training.date.toLocalDateTime(TimeZone.currentSystemDefault()).date == selectedDate.value		}		Box(modifier = Modifier.fillMaxSize()) {			if (filteredTrainings.isEmpty()) {				EmptyContent(					onAddWorkout = onAddWorkout,				)			} else {				LazyColumn(					modifier = modifier, state = lazyListState, contentPadding = PaddingValues(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)				) {					items(filteredTrainings) { training ->						WorkoutCard(							training = training,							icon = Icons.Default.FitnessCenter,							onClick = onWorkoutSelected,						)					}				}			}		}	}}@Composableprivate fun WeekSelector(	weekStart: LocalDate,	selectedDate: LocalDate,	today: LocalDate,	onDateSelected: (LocalDate) -> Unit,	modifier: Modifier = Modifier,) {	val dates = List(7) { index ->		weekStart.plus(index.toLong(), DateTimeUnit.DAY)	}	Row(		modifier = modifier			.fillMaxWidth()			.padding(vertical = 8.dp),		horizontalArrangement = Arrangement.SpaceBetween	) {		dates.forEach { date ->			DayItem(				modifier = Modifier.weight(1f),				date = date,				isSelected = date == selectedDate,				isToday = date == today,				onClick = { onDateSelected(date) }			)		}	}}@Composableprivate fun DayItem(	modifier: Modifier = Modifier,	date: LocalDate,	isSelected: Boolean,	isToday: Boolean,	onClick: () -> Unit,) {	val dayNames = listOf("Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс")	val dayOfWeekIndex = (date.dayOfWeek.isoDayNumber - 1) % 7	val dayName = dayNames[dayOfWeekIndex]	Card(		modifier = modifier.padding(horizontal = 4.dp).clickable(onClick = onClick),		shape = RoundedCornerShape(8.dp),		border = if (isToday) BorderStroke(2.dp, FitTheme.colors.permanentPrimary) else null,		colors = CardDefaults.cardColors(			containerColor = if (isSelected) {				FitTheme.colors.permanentPrimary			} else {				Color.Transparent			}, contentColor = FitTheme.colors.fondPrimary		)	) {		Column(			modifier = Modifier				.padding(8.dp)				.fillMaxWidth(),			horizontalAlignment = Alignment.CenterHorizontally		) {			Text(				text = dayName,				style = MaterialTheme.typography.labelSmall			)			Text(				text = date.dayOfMonth.toString(),				style = MaterialTheme.typography.titleMedium			)		}	}}@Composablefun WorkoutCard(	icon: ImageVector,	training: Training,	onClick: (Int) -> Unit,	modifier: Modifier = Modifier) {	Card(		modifier = modifier			.fillMaxWidth()			.clickable { onClick(training.id) },		elevation = CardDefaults.cardElevation(5.dp),		colors = CardDefaults.cardColors(			containerColor = FitTheme.colors.bGTertiary,		),	) {		Row(			modifier = Modifier				.fillMaxWidth()				.padding(16.dp),			verticalAlignment = Alignment.CenterVertically,			horizontalArrangement = Arrangement.spacedBy(16.dp)		) {			Box(				modifier = Modifier					.clip(RoundedCornerShape(8.dp))					.background(FitTheme.colors.fondInvert),				contentAlignment = Alignment.Center,			) {				Icon(					imageVector = icon,					contentDescription = null,					modifier = Modifier						.padding(12.dp)						.size(32.dp),					tint = FitTheme.colors.permanentPrimaryLight,				)			}			Column(				modifier = Modifier.weight(1f),				verticalArrangement = Arrangement.spacedBy(4.dp),			) {				Text(					text = training.name,					style = MaterialTheme.typography.titleMedium,					fontSize = 18.sp,					color = FitTheme.colors.fondPrimary,				)				Text(					text = "Силовая тренировка в ${training.date.toLocalDateTime(TimeZone.currentSystemDefault()).time}",					style = MaterialTheme.typography.bodyMedium,					fontSize = 14.sp,					color = FitTheme.colors.fondTertiary,				)			}		}	}}fun getCurrentDate(): LocalDate {	return Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date}fun LocalDate.getWeekStart(): LocalDate {	var date = this	while (date.dayOfWeek != DayOfWeek.MONDAY) {		date = date.minus(1, DateTimeUnit.DAY)	}	return date}