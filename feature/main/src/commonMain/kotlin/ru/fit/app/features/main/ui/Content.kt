package ru.fit.app.features.main.uiimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.Personimport androidx.compose.material3.Buttonimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.input.pointer.pointerInputimport androidx.compose.ui.unit.dpimport kotlinx.datetime.Clockimport kotlinx.datetime.DateTimeUnitimport kotlinx.datetime.LocalDateimport kotlinx.datetime.TimeZoneimport kotlinx.datetime.isoDayNumberimport kotlinx.datetime.minusimport kotlinx.datetime.plusimport kotlinx.datetime.toLocalDateTimeimport ru.fit.app.design.component.ui.AppBarimport ru.fit.app.shared.training.domain.entity.Training@Composablefun Content(	modifier: Modifier = Modifier,	trainings: List<Training>,	onWorkoutSelected: (Int) -> Unit,	onProfileSelected: () -> Unit,	onAddWorkout: () -> Unit,	onRefresh: () -> Unit,) {	val lazyListState = rememberLazyListState()	val selectedDate = remember {		mutableStateOf(Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date)	}	AppBar(		title = "Main",		leftIcon = Icons.Default.Person,		onLeftButtonClick = onProfileSelected,	)	Column {		WeekSelector(			selectedDate = selectedDate.value,			onDateSelected = { selectedDate.value = it },			onWeekSwiped = { delta ->				selectedDate.value = selectedDate.value.plus(delta * 7, DateTimeUnit.DAY)			}		)		val filteredTrainings = trainings.filter { training ->			training.date				.toLocalDateTime(TimeZone.currentSystemDefault())				.date == selectedDate.value		}		Box(modifier = Modifier.fillMaxSize()) {			if (filteredTrainings.isEmpty()) {				Column(					modifier = Modifier.fillMaxSize(),					horizontalAlignment = Alignment.CenterHorizontally,					verticalArrangement = Arrangement.Center				) {					Text(						text = "Нет тренировок в этот день",						style = MaterialTheme.typography.titleMedium					)					Button(						onClick = onAddWorkout,						modifier = Modifier.padding(top = 16.dp)					) {						Icon(							imageVector = Icons.Default.Add,							contentDescription = "Добавить",							modifier = Modifier.size(18.dp)						)						Text(							text = "Добавить тренировку",							modifier = Modifier.padding(start = 8.dp)						)					}				}			} else {				LazyColumn(					modifier = modifier,					state = lazyListState,					contentPadding = PaddingValues(16.dp),					verticalArrangement = Arrangement.spacedBy(8.dp)				) {					items(filteredTrainings) { training ->						WorkoutCard(							training = training,							onClick = onWorkoutSelected,						)					}				}			}		}	}}@Composableprivate fun WeekSelector(	selectedDate: LocalDate,	onDateSelected: (LocalDate) -> Unit,	onWeekSwiped: (Int) -> Unit,	modifier: Modifier = Modifier,) {	val daysFromMonday = (selectedDate.dayOfWeek.isoDayNumber - 1)	val startDate = selectedDate.minus(daysFromMonday.toLong(), DateTimeUnit.DAY)	val dates = List(7) { index ->		startDate.plus(index.toLong(), DateTimeUnit.DAY)	}	Row(		modifier = modifier			.fillMaxWidth()			.padding(vertical = 8.dp)			.pointerInput(Unit) {//				detectHorizontalGestures { _, delta ->//					when {//						delta < -10 -> onWeekSwiped(1)//						delta > 10 -> onWeekSwiped(-1)//					}//				}			},		horizontalArrangement = Arrangement.SpaceBetween	) {		dates.forEach { date ->			DayItem(				modifier = Modifier.weight(1f),				date = date,				isSelected = date == selectedDate,				onClick = { onDateSelected(date) }			)		}	}}@Composableprivate fun DayItem(	modifier: Modifier = Modifier,	date: LocalDate,	isSelected: Boolean,	onClick: () -> Unit,) {	val dayNames = listOf("Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс") // todo kostl	val dayOfWeekIndex = (date.dayOfWeek.isoDayNumber - 1) % 7	val dayName = dayNames[dayOfWeekIndex]	Card(		modifier = modifier			.padding(horizontal = 4.dp)			.clickable(onClick = onClick),		shape = RoundedCornerShape(8.dp),		colors = CardDefaults.cardColors(			containerColor = if (isSelected) MaterialTheme.colorScheme.primary			else MaterialTheme.colorScheme.surface		)	) {		Column(			modifier = Modifier				.padding(8.dp)				.fillMaxWidth(),			horizontalAlignment = Alignment.CenterHorizontally		) {			Text(				text = dayName,				style = MaterialTheme.typography.labelSmall			)			Text(				text = date.dayOfMonth.toString(),				style = MaterialTheme.typography.titleMedium			)		}	}}@Composablefun WorkoutCard(	training: Training,	onClick: (Int) -> Unit,) {	Card(		modifier = Modifier			.fillMaxWidth()			.clickable { onClick(training.id) },	) {		Row(			modifier = Modifier				.padding(16.dp)				.fillMaxWidth(),			verticalAlignment = Alignment.CenterVertically		) {			Text(text = training.name)		}	}}