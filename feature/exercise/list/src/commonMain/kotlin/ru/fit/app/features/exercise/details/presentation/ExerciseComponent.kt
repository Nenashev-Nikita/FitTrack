package ru.fit.app.features.exercise.details.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.essenty.lifecycle.subscribeimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.SupervisorJobimport kotlinx.coroutines.cancelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.launchimport ru.fit.app.shared.exercise.domain.usecase.GetExerciseListUseCaseclass ExerciseComponent(	private val getExerciseListUseCase: GetExerciseListUseCase,	componentContext: ComponentContext,) : ComponentContext by componentContext {	private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)	private val _screenState = MutableStateFlow<State>(State.Initial)	val screenState: StateFlow<State> = _screenState.asStateFlow()	init {		lifecycle.subscribe(			onDestroy = { coroutineScope.cancel() }		)	}	fun loadContent() {		coroutineScope.launch {			_screenState.value = State.Loading			try {				val exercises = getExerciseListUseCase()				_screenState.value = State.Content(					exercises = exercises,				)			} catch (e: Exception) {				_screenState.value = State.Error			}		}	}}