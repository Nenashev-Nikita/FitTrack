package ru.fit.app.features.profile.uiimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.filled.Editimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport ru.fit.app.FitThemeimport ru.fit.app.design.component.ui.AppBarimport ru.fit.app.design.component.ui.AppBarActionimport ru.fit.app.features.profile.presentation.ProfileComponentimport ru.fit.app.features.profile.presentation.State@Composablefun ProfileScreen(	component: ProfileComponent,	modifier: Modifier = Modifier,) {	val screenState by component.screenState.collectAsState()	Column(		modifier = modifier			.fillMaxWidth()			.background(FitTheme.colors.bGPrimary),		horizontalAlignment = Alignment.CenterHorizontally,	) {		AppBar(			title = "Main",			leftAction = AppBarAction(				icon = Icons.Default.ArrowBack,				onClick = component::onBack			),			rightActions = listOf(				AppBarAction(					icon = Icons.Default.Edit,					onClick = component::edit,				)			),		)		when (val state = screenState) {			State.Initial    -> {				LaunchedEffect(Unit) {					component.loadContent()				}			}			State.Error      -> Text("Error")			State.Loading    -> CircularProgressIndicator()			is State.Content -> {				Content(					userProfile = state.user,					onProgressClick = component::navigationProgress,				)			}		}	}}