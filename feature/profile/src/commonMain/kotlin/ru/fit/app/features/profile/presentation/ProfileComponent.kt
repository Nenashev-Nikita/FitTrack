package ru.fit.app.features.profile.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.essenty.lifecycle.subscribeimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.SupervisorJobimport kotlinx.coroutines.cancelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.launchimport ru.fit.app.shared.profile.domain.usecase.GetUserProfileUseCaseclass ProfileComponent(	componentContext: ComponentContext,	private val getUserProfileUseCase: GetUserProfileUseCase,	private val onMainSelected: () -> Unit,	private val onProgressSelected: () -> Unit,) : ComponentContext by componentContext {	private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)	private val _screenState = MutableStateFlow<State>(State.Initial)	val screenState: StateFlow<State> = _screenState.asStateFlow()	init {		lifecycle.subscribe(			onDestroy = { coroutineScope.cancel() }		)	}	fun onBack() {		onMainSelected()	}	fun navigationProgress() {		onProgressSelected()	}	fun loadContent() {		coroutineScope.launch {			_screenState.value = State.Loading			try {				val user = getUserProfileUseCase()				_screenState.value = State.Content(					user = user,				)			} catch (e: Exception) {				_screenState.value = State.Error			}		}	}	fun edit() {	}}