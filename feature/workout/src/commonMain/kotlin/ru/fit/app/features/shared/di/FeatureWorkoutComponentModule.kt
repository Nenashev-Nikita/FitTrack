package ru.fit.app.features.shared.diimport com.arkivanov.decompose.ComponentContextimport org.kodein.di.DIimport org.kodein.di.bindimport org.kodein.di.factoryimport org.kodein.di.instanceimport ru.fit.app.features.details.di.DetailsArgsimport ru.fit.app.features.details.presentation.DetailsComponentimport ru.fit.app.features.selection.di.SelectionArgsimport ru.fit.app.features.selection.presentation.SelectionComponentimport ru.fit.app.features.shared.presentation.FeatureWorkoutComponentimport ru.fit.app.features.workout.di.WorkoutComponentArgsimport ru.fit.app.features.workout.presentation.WorkoutComponentdata class FeatureWorkoutArgs(	val componentContext: ComponentContext,	val idWorkout: Int)val FeatureWorkoutComponentModule = DI.Module("FeatureWorkoutComponentModule") {	bind<FeatureWorkoutComponent>() with factory { args: FeatureWorkoutArgs ->		FeatureWorkoutComponent(			componentContext = args.componentContext,			workoutComponentFactory = { context, onSelected, onDetails ->				instance<(WorkoutComponentArgs) -> WorkoutComponent>()(					WorkoutComponentArgs(context, args.idWorkout, onSelected, onDetails)				)			},			detailsComponentFactory = { context ->				instance<(DetailsArgs) -> DetailsComponent>()(					DetailsArgs(context, args.idWorkout)				)			},			selectionComponentFactory = { context ->				instance<(SelectionArgs) -> SelectionComponent>()(					SelectionArgs(context)				)			},			idWorkout = args.idWorkout,		)	}}