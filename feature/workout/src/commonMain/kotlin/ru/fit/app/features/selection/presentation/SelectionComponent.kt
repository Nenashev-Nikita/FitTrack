package ru.fit.app.features.selection.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.essenty.lifecycle.subscribeimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.SupervisorJobimport kotlinx.coroutines.cancelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.datetime.Instantimport ru.fit.app.shared.training.domain.entity.Trainingclass SelectionComponent(	componentContext: ComponentContext,) : ComponentContext by componentContext {	private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)	private val _screenState = MutableStateFlow<SelectionState>(SelectionState.Initial)	val screenState: StateFlow<SelectionState> = _screenState.asStateFlow()	init {		lifecycle.subscribe(			onDestroy = { coroutineScope.cancel() }		)	}	fun loadContent() {		_screenState.value = SelectionState.Content(			training = Training(				id = 1,				name = "kfkfkf",				date = Instant.DISTANT_PAST,				exercise = listOf()			)		)	}}