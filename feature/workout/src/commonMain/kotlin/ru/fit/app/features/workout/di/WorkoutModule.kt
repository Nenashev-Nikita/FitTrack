package ru.fit.app.features.workout.diimport com.arkivanov.decompose.ComponentContextimport org.kodein.di.DIimport org.kodein.di.bindimport org.kodein.di.factoryimport org.kodein.di.instanceimport ru.fit.app.features.workout.data.converter.ConverterWorkoutimport ru.fit.app.features.workout.data.network.WorkoutApiimport ru.fit.app.features.workout.data.repository.WorkoutRepositoryImplimport ru.fit.app.features.workout.domain.repository.WorkoutRepositoryimport ru.fit.app.features.workout.domain.usecase.GetWorkoutUseCaseimport ru.fit.app.features.workout.presentation.WorkoutComponentdata class WorkoutComponentArgs(	val componentContext: ComponentContext,	val id: Int,	val onSelected: () -> Unit,	val onDetails: () -> Unit)val WorkoutModule = DI.Module("WorkoutModule") {	bind<WorkoutApi>() with factory { WorkoutApi() }	bind<ConverterWorkout>() with factory { ConverterWorkout() }	bind<WorkoutRepository>() with factory { WorkoutRepositoryImpl(instance(), instance()) }	bind<GetWorkoutUseCase>() with factory { GetWorkoutUseCase(instance()) }	bind<WorkoutComponent>() with factory { args: WorkoutComponentArgs ->		WorkoutComponent(			componentContext = args.componentContext,			getWorkoutUseCase = instance(),			id = args.id,			onDetailsSelected = args.onDetails,			onSelectedSelected = args.onSelected		)	}}