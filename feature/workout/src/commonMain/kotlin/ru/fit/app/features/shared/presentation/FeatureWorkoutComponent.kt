package ru.fit.app.features.shared.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.ChildStackimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.bringToFrontimport com.arkivanov.decompose.router.stack.childStackimport com.arkivanov.decompose.value.Valueimport kotlinx.serialization.Serializableimport ru.fit.app.features.details.presentation.DetailsComponentimport ru.fit.app.features.selection.presentation.SelectionComponentimport ru.fit.app.features.workout.presentation.WorkoutComponentclass FeatureWorkoutComponent(	private val workoutComponentFactory: (ComponentContext, () -> Unit, () -> Unit) -> WorkoutComponent,	private val selectionComponentFactory: (ComponentContext) -> SelectionComponent,	private val detailsComponentFactory: (ComponentContext) -> DetailsComponent,	idWorkout: Int,	componentContext: ComponentContext,) : ComponentContext by componentContext {	private val navigation = StackNavigation<Config>()	private val childStack = childStack(		source = navigation,		serializer = Config.serializer(),		initialConfiguration = Config.Workout(id = idWorkout),		handleBackButton = true,		childFactory = ::createChild	)	val stack: Value<ChildStack<*, Child>> = childStack	sealed class Child {		data class Workout(val component: WorkoutComponent) : Child()		data class Selection(val component: SelectionComponent) : Child()		data class Details(val component: DetailsComponent) : Child()	}	private fun createChild(config: Config, componentContext: ComponentContext): Child =		when (config) {			is Config.Workout   ->				Child.Workout(					workoutComponentFactory(						componentContext,						{ navigation.bringToFront(Config.Selection) },						{ navigation.bringToFront(Config.Details) },					)				)			is Config.Selection ->				Child.Selection(selectionComponentFactory(componentContext))			is Config.Details   ->				Child.Details(detailsComponentFactory(componentContext))		}	@Serializable	private sealed interface Config {		@Serializable		data class Workout(val id: Int) : Config		@Serializable		data object Selection : Config		@Serializable		data object Details : Config	}}