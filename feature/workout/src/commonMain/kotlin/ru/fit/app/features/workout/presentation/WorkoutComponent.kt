package ru.fit.app.features.workout.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.essenty.lifecycle.subscribeimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.SupervisorJobimport kotlinx.coroutines.cancelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.launchimport ru.fit.app.features.workout.domain.usecase.GetWorkoutUseCaseclass WorkoutComponent(	private val id: Int,	private val getWorkoutUseCase: GetWorkoutUseCase,	private val onSelectedSelected: () -> Unit,	private val onDetailsSelected: () -> Unit,	componentContext: ComponentContext,) : ComponentContext by componentContext {	private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)	private val _screenState = MutableStateFlow<WorkoutState>(WorkoutState.Initial)	val screenState: StateFlow<WorkoutState> = _screenState.asStateFlow()	init {		lifecycle.subscribe(			onDestroy = { coroutineScope.cancel() }		)	}	fun loadContent() {		coroutineScope.launch {			_screenState.value = WorkoutState.Loading			try {				val training = getWorkoutUseCase(id)				_screenState.value = WorkoutState.Content(					training = training,				)			} catch (e: Exception) {				_screenState.value = WorkoutState.Error			}		}	}	fun navigationSelection() {		onSelectedSelected()	}	fun navigationDetails() {		onDetailsSelected()	}}