package ru.fit.app.design.component.uiimport androidx.compose.animation.AnimatedVisibilityimport androidx.compose.animation.fadeInimport androidx.compose.animation.fadeOutimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.BasicTextFieldimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Searchimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.SolidColorimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.sp@Composablefun SearchBar(	query: String,	onQueryChange: (String) -> Unit,	leftIcon: ImageVector? = null,	modifier: Modifier = Modifier,) {	Row(		modifier = modifier			.fillMaxWidth()			.padding(horizontal = 16.dp)			.background(				color = MaterialTheme.colorScheme.surfaceVariant,				shape = RoundedCornerShape(12.dp)			),		verticalAlignment = Alignment.CenterVertically	) {		leftIcon?.let {			Icon(				imageVector = leftIcon,				contentDescription = null,				tint = MaterialTheme.colorScheme.onSurfaceVariant,				modifier = Modifier.padding(end = 8.dp)			)		}		BasicTextField(			value = query,			onValueChange = onQueryChange,			modifier = Modifier				.padding(horizontal = 16.dp)				.weight(1f),			textStyle = TextStyle(				color = MaterialTheme.colorScheme.onSurface,				fontSize = 16.sp			),			cursorBrush = SolidColor(MaterialTheme.colorScheme.primary),			decorationBox = { innerTextField ->				if (query.isEmpty()) {					Text(						text = "Search workouts...",						color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),						fontSize = 16.sp					)				}				innerTextField()			}		)		AnimatedVisibility(			visible = query.isNotEmpty(),			enter = fadeIn(),			exit = fadeOut()		) {			IconButton(				onClick = { onQueryChange("") }			) {				Icon(					imageVector = Icons.Default.Search,					contentDescription = null,					tint = MaterialTheme.colorScheme.onSurfaceVariant				)			}		}	}}@Composablefun SearchBarPreview() {	var query by remember { mutableStateOf("") }	SearchBar(		query = query,		onQueryChange = { query = it },		modifier = Modifier.padding(16.dp)	)}