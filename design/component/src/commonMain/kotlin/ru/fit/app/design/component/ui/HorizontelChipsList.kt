package ru.fit.app.design.component.uiimport androidx.compose.foundation.horizontalScrollimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.FilterListimport androidx.compose.material3.AssistChipDefaultsimport androidx.compose.material3.ElevatedAssistChipimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.rememberimport androidx.compose.runtime.snapshots.SnapshotStateListimport androidx.compose.runtime.toMutableStateListimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.unit.dpdata class ChipItem(	val text: String? = null,	val icon: ImageVector? = null,	val isSelected: Boolean = false,	val onClick: (ChipItem) -> Unit)@Composablefun HorizontalChipsList(	iconChip: ChipItem,	textChips: List<ChipItem>,	modifier: Modifier = Modifier) {	val sortedTextChips: SnapshotStateList<ChipItem> = remember(textChips) {		textChips.sortedBy { !it.isSelected }.toMutableStateList()	}	Row(		modifier = modifier			.horizontalScroll(rememberScrollState())			.padding(horizontal = 16.dp, vertical = 8.dp),		horizontalArrangement = Arrangement.spacedBy(8.dp)	) {		ElevatedAssistChip(			onClick = {				iconChip.onClick(iconChip.copy(isSelected = !iconChip.isSelected))			},			label = {},			leadingIcon = {				iconChip.icon?.let {					Icon(						imageVector = it,						contentDescription = null,						modifier = Modifier.size(AssistChipDefaults.IconSize)					)				}			},			colors = AssistChipDefaults.assistChipColors(				containerColor = if (iconChip.isSelected) {					MaterialTheme.colorScheme.primaryContainer				} else {					MaterialTheme.colorScheme.surfaceVariant				},				labelColor = if (iconChip.isSelected) {					MaterialTheme.colorScheme.onPrimaryContainer				} else {					MaterialTheme.colorScheme						.onSurface				}			),		)		sortedTextChips.forEachIndexed { index, chip ->			ElevatedAssistChip(				onClick = {					val updatedChip = chip.copy(isSelected = !chip.isSelected)					chip.onClick(updatedChip)					sortedTextChips[index] = updatedChip					sortedTextChips.sortBy { !it.isSelected }				},				label = {					chip.text?.let {						Text(							text = it,							style = MaterialTheme.typography.labelLarge						)					}				},				colors = AssistChipDefaults.assistChipColors(					containerColor = if (chip.isSelected) {						MaterialTheme.colorScheme.primaryContainer					} else {						MaterialTheme.colorScheme.surfaceVariant					},					labelColor = if (chip.isSelected) {						MaterialTheme.colorScheme.onPrimaryContainer					} else {						MaterialTheme.colorScheme							.onSurface					}				),			)		}	}}@Composablefun HorizontalChipsListPreview() {	HorizontalChipsList(		iconChip = ChipItem(			icon = Icons.Default.FilterList,			isSelected = false,			onClick = {}		),		textChips = listOf(			ChipItem(				text = "Cardio",				isSelected = false,				onClick = {}			),			ChipItem(				text = "Strength",				isSelected = true,				onClick = {}			),			ChipItem(				text = "Yoga",				isSelected = false,				onClick = {}			)		),		modifier = Modifier.padding(16.dp)	)}