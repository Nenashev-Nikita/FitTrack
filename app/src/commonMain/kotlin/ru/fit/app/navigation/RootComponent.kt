package ru.fit.app.navigationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.ChildStackimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.bringToFrontimport com.arkivanov.decompose.router.stack.childStackimport com.arkivanov.decompose.router.stack.popimport com.arkivanov.decompose.value.Valueimport kotlinx.serialization.Serializableimport ru.fit.app.features.main.presentation.ExerciseComponentimport ru.fit.app.features.main.presentation.MainComponentimport ru.fit.app.features.main.presentation.ProgramComponentimport ru.fit.app.features.workout.presentation.WorkoutComponentclass RootComponent(	componentContext: ComponentContext,	private val mainComponentFactory: (ComponentContext, (Int) -> Unit) -> MainComponent,	private val programComponentFactory: (ComponentContext) -> ProgramComponent,	private val exerciseComponentFactory: (ComponentContext) -> ExerciseComponent,	private val workoutComponentFactory: (ComponentContext, Int) -> WorkoutComponent,) : ComponentContext by componentContext {	private val navigation = StackNavigation<Config>()	private val childStack = childStack(		source = navigation,		serializer = Config.serializer(),		initialConfiguration = Config.Main,		handleBackButton = true,		childFactory = ::createChild	)	val stack: Value<ChildStack<*, Child>> = childStack	fun onBackClicked() {		navigation.pop()	}	private fun createChild(config: Config, componentContext: ComponentContext): Child =		when (config) {			is Config.Main     ->				Child.Main(					mainComponentFactory(componentContext) { id ->						navigation.bringToFront(Config.Workout(id))					}				)			is Config.Program  ->				Child.Program(					ProgramComponent(						componentContext = componentContext,					)				)			is Config.Exercise ->				Child.Exercise(					ExerciseComponent(						componentContext = componentContext,					)				)			is Config.Workout  ->				Child.Workout(					workoutComponentFactory(componentContext, config.id)				)		}	sealed class Child {		data class Main(val component: MainComponent) : Child()		data class Program(val component: ProgramComponent) : Child()		data class Exercise(val component: ExerciseComponent) : Child()		data class Workout(val component: WorkoutComponent) : Child()	}	@Serializable	private sealed interface Config {		@Serializable		data object Main : Config		@Serializable		data class Workout(val id: Int) : Config		@Serializable		data object Program : Config		@Serializable		data object Exercise : Config	}}