package ru.fit.app.navigationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.bringToFrontimport com.arkivanov.decompose.router.stack.childStackimport com.arkivanov.essenty.parcelable.Parcelableimport com.arkivanov.essenty.parcelable.Parcelizeimport kotlinx.serialization.Serializableimport ru.fit.app.features.main.presentation.ExerciseComponentimport ru.fit.app.features.main.presentation.MainComponentimport ru.fit.app.features.main.presentation.ProgramComponentimport ru.fit.app.features.workout.presentation.WorkoutComponentclass RootComponent(	componentContext: ComponentContext,	private val mainComponentFactory: (ComponentContext, (Int) -> Unit) -> MainComponent,	private val programComponentFactory: (ComponentContext) -> ProgramComponent,	private val exerciseComponentFactory: (ComponentContext) -> ExerciseComponent,	private val workoutComponentFactory: (ComponentContext, Int) -> WorkoutComponent,) : ComponentContext by componentContext {	private val navigation = StackNavigation<Config>()	val childStack = childStack(		source = navigation,		initialConfiguration = Config.Main,		handleBackButton = true,		childFactory = ::createChild	)	fun onTabClicked(config: Config) {		navigation.bringToFront(config)	}	private fun createChild(config: Config, context: ComponentContext): Child =		when (config) {			Config.Main       -> Child.Main(mainComponentFactory(context) { id ->				navigation.bringToFront(Config.Workout(id))			})			Config.Program    -> Child.Program(programComponentFactory(context))			Config.Exercise   -> Child.Exercise(exerciseComponentFactory(context))			is Config.Workout -> Child.Workout(workoutComponentFactory(context, config.id))		}	sealed class Child {		data class Main(val component: MainComponent) : Child()		data class Program(val component: ProgramComponent) : Child()		data class Exercise(val component: ExerciseComponent) : Child()		data class Workout(val component: WorkoutComponent) : Child()	}	@Parcelize	@Serializable	sealed class Config : Parcelable {		data object Main : Config()		data class Workout(val id: Int) : Config()		data object Program : Config()		data object Exercise : Config()	}}