package ru.fit.app.navigationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.childStackimport kotlinx.serialization.Serializableimport ru.fit.app.features.main.presentation.MainComponentclass RootComponent(	componentContext: ComponentContext,	private val mainComponentFactory: (ComponentContext) -> MainComponent) : ComponentContext by componentContext {	private val navigation = StackNavigation<Configuration>()	val childStack = childStack(		source = navigation,		serializer = Configuration.serializer(),		initialConfiguration = Configuration.ScreenMain,		handleBackButton = true,		childFactory = ::createChild	)	private fun createChild(		config: Configuration,		context: ComponentContext	): Child {		return when (config) {			Configuration.ScreenMain -> Child.ScreenMain(				mainComponentFactory(context)			)		}	}	sealed class Child {		data class ScreenMain(val component: MainComponent) : Child()	}	@Serializable	sealed class Configuration {		@Serializable		data object ScreenMain : Configuration()	}}