package ru.fit.app.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.ChildStackimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.bringToFrontimport com.arkivanov.decompose.router.stack.childStackimport com.arkivanov.decompose.router.stack.popimport com.arkivanov.decompose.value.Valueimport kotlinx.serialization.Serializableimport ru.fit.app.features.main.presentation.MainComponentimport ru.fit.app.features.profile.presentation.ProfileComponentimport ru.fit.app.features.progress.details.presentation.DetailsProgressComponentimport ru.fit.app.features.progress.list.presentation.ListProgressComponentimport ru.fit.app.features.workout.presentation.WorkoutComponentimport ru.fit.app.tabs.TabsComponentimport ru.fit.app.utils.Urlimport ru.fit.app.utils.consumePathSegmentimport ru.fit.app.utils.pathSegmentOfclass RootComponent(	componentContext: ComponentContext,	deepLinkUrl: Url? = null,	private val mainComponentFactory: (ComponentContext, (Int) -> Unit, () -> Unit) -> MainComponent,	private val workoutComponentFactory: (ComponentContext, Int) -> WorkoutComponent,	private val profileComponentFactory: (ComponentContext, () -> Unit, () -> Unit) -> ProfileComponent,	private val detailsProgressComponentFactory: (ComponentContext, () -> Unit) -> DetailsProgressComponent,	private val listProgressComponentFactory: (ComponentContext, (Int) -> Unit, () -> Unit) -> ListProgressComponent,) : ComponentContext by componentContext {	private val navigation = StackNavigation<Config>()	private val childStack = childStack(		source = navigation,		serializer = Config.serializer(),		initialStack = { getInitialStack(deepLinkUrl) },		handleBackButton = true,		childFactory = ::createChild	)	val stack: Value<ChildStack<*, Child>> = childStack	fun onBackClicked() {		navigation.pop()	}	private fun createChild(config: Config, componentContext: ComponentContext): Child =		when (config) {			is Config.Tabs            ->				Child.TabsChild(					TabsComponent(						componentContext = componentContext,						deepLinkUrl = config.deepLinkUrl,						mainComponentFactory = {							mainComponentFactory(								componentContext,								{ id -> navigation.bringToFront(Config.Workout(id)) },								{ navigation.bringToFront(Config.Profile) }							)						},					)				)			is Config.Workout         ->				Child.Workout(					workoutComponentFactory(componentContext, config.id)				)			Config.Profile            ->				Child.Profile(					profileComponentFactory(						componentContext,						{ navigation.pop() },						{ navigation.bringToFront(Config.ListProgress) }					)				)			is Config.DetailsProgress ->				Child.DetailsProgress(					detailsProgressComponentFactory(						componentContext					) { navigation.pop() }				)			is Config.ListProgress    ->				Child.ListProgress(					listProgressComponentFactory(						componentContext,						{ id -> navigation.bringToFront(Config.DetailsProgress(id)) },						{ navigation.pop() }					)				)		}	private fun getInitialStack(deepLinkUrl: Url?): List<Config> {		val (path, childUrl) = deepLinkUrl?.consumePathSegment() ?: return listOf(Config.Tabs())		return when (path) {			pathSegmentOf<Config.Workout>() -> listOf(Config.Tabs(), Config.Workout(1))			else                            -> listOf(Config.Tabs(deepLinkUrl = childUrl))		}	}	sealed class Child {		data class TabsChild(val component: TabsComponent) : Child()		data class Workout(val component: WorkoutComponent) : Child()		data class Profile(val component: ProfileComponent) : Child()		data class DetailsProgress(val component: DetailsProgressComponent) : Child()		data class ListProgress(val component: ListProgressComponent) : Child()	}	@Serializable	private sealed interface Config {		@Serializable		data class Tabs(val deepLinkUrl: Url? = null) : Config		@Serializable		data class Workout(val id: Int) : Config		@Serializable		data object Profile : Config		@Serializable		data class DetailsProgress(val id: Int) : Config		@Serializable		data object ListProgress : Config	}}