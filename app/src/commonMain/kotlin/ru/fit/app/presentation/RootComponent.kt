package ru.fit.app.presentationimport com.arkivanov.decompose.ComponentContextimport com.arkivanov.decompose.router.stack.ChildStackimport com.arkivanov.decompose.router.stack.StackNavigationimport com.arkivanov.decompose.router.stack.bringToFrontimport com.arkivanov.decompose.router.stack.childStackimport com.arkivanov.decompose.router.stack.popimport com.arkivanov.decompose.value.Valueimport kotlinx.serialization.Serializableimport org.kodein.di.DIimport ru.fit.app.di.AppDIimport ru.fit.app.features.exercise.di.MainComponentArgsimport ru.fit.app.features.profile.di.ProfileComponentArgsimport ru.fit.app.features.profile.presentation.ProfileComponentimport ru.fit.app.features.progress.details.presentation.DetailsProgressComponentimport ru.fit.app.features.progress.list.presentation.ListProgressComponentimport ru.fit.app.features.shared.presentation.FeatureWorkoutComponentimport ru.fit.app.presentation.navigation.MainNavigationImplimport ru.fit.app.presentation.navigation.ProfileNavigationImplimport ru.fit.app.tabs.TabsComponentimport ru.fit.app.utils.Urlclass RootComponent(	componentContext: ComponentContext,	deepLinkUrl: Url? = null,	private val di: DI = AppDI.instance) : ComponentContext by componentContext {	private val navigation = StackNavigation<Config>()	private val componentFactory = ComponentFactory(di)	private val childStack = childStack(		source = navigation,		serializer = Config.serializer(),		initialConfiguration = Config.Tabs(deepLinkUrl),		handleBackButton = true,		childFactory = ::createChild	)	val stack: Value<ChildStack<*, Child>> = childStack	fun onBackClicked() {		navigation.pop()	}	private fun createChild(config: Config, componentContext: ComponentContext): Child =		when (config) {			is Config.Tabs            ->				Child.TabsChild(					TabsComponent(						componentContext = componentContext,						deepLinkUrl = config.deepLinkUrl,						mainComponentFactory = {							componentFactory.main(								MainComponentArgs(									componentContext = componentContext,									navigation = MainNavigationImpl(navigation),								)							)						},						exerciseComponentFactory = {							componentFactory.exercise(								componentContext = componentContext,							)						},						programComponentFactory = {							componentFactory.program(								componentContext = componentContext,							)						},					)				)			is Config.Workout         ->				Child.Workout(					componentFactory.workout(						componentContext = componentContext,						idWorkout = config.id,					)				)			is Config.Profile ->				Child.Profile(					componentFactory.profile(						ProfileComponentArgs(							componentContext = componentContext,							navigation = ProfileNavigationImpl(navigation)						)					)				)			is Config.DetailsProgress ->				Child.DetailsProgress(					componentFactory.detailsProgress(						componentContext = componentContext,						onBack = { navigation.pop() }					)				)			is Config.ListProgress    ->				Child.ListProgress(					componentFactory.listProgress(						componentContext = componentContext,						onDetailsProgress = { id -> navigation.bringToFront(Config.ListProgress) },						onBack = { navigation.pop() }					)				)		}	sealed class Child {		data class TabsChild(val component: TabsComponent) : Child()		data class Workout(val component: FeatureWorkoutComponent) : Child()		data class Profile(val component: ProfileComponent) : Child()		data class DetailsProgress(val component: DetailsProgressComponent) : Child()		data class ListProgress(val component: ListProgressComponent) : Child()	}	@Serializable	sealed interface Config {		@Serializable		data class Tabs(val deepLinkUrl: Url? = null) : Config		@Serializable		data class Workout(val id: Int) : Config		@Serializable		data object Profile : Config		@Serializable		data class DetailsProgress(val id: Int) : Config		@Serializable		data object ListProgress : Config	}}